import 'package:flutter/foundation.dart';
import '../models/chat_models.dart';
import 'gemini_service.dart';
import 'firebase_chat_service.dart';

class ChatProvider with ChangeNotifier {
  final List<ChatMessage> _messages = [];
  final GeminiService _geminiService = GeminiService();
  final FirebaseChatService _firebaseChatService = FirebaseChatService();
  
  bool _isLoading = false;
  String? _error;
  String? _currentSessionId;
  List<ChatSession> _chatSessions = [];

  List<ChatMessage> get messages => List.unmodifiable(_messages);
  bool get isLoading => _isLoading;
  String? get error => _error;
  String? get currentSessionId => _currentSessionId;
  List<ChatSession> get chatSessions => List.unmodifiable(_chatSessions);

  ChatProvider() {
    _initializeChat();
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó
  Future<void> _initializeChat() async {
    try {
      _loadChatSessions();
    } catch (e) {
      print('Error initializing chat: $e');
      _error = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡πÑ‡∏î‡πâ';
      notifyListeners();
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î chat sessions ‡∏à‡∏≤‡∏Å Firebase
  void _loadChatSessions() {
    try {
      _firebaseChatService.getChatSessions().listen((sessions) {
        _chatSessions = sessions;
        notifyListeners();
      });
    } catch (e) {
      print('Error loading chat sessions: $e');
      _error = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÑ‡∏î‡πâ';
      notifyListeners();
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà
  Future<void> startNewSession({String? title}) async {
    try {
      _currentSessionId = await _firebaseChatService.createChatSession(
        title: title ?? '‡πÅ‡∏ä‡∏ó‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏ô‡∏±‡∏Ç'
      );
      
      _messages.clear();
      addWelcomeMessage();
      notifyListeners();
    } catch (e) {
      print('Error starting new session: $e');
      _error = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ';
      notifyListeners();
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î session ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  Future<void> loadSession(String sessionId) async {
    try {
      _currentSessionId = sessionId;
      _messages.clear();
      
      // ‡∏ü‡∏±‡∏á messages ‡∏à‡∏≤‡∏Å Firebase real-time
      _firebaseChatService.getMessages(sessionId).listen((messages) {
        _messages.clear();
        _messages.addAll(messages);
        notifyListeners();
      });
      
      notifyListeners();
    } catch (e) {
      print('Error loading session: $e');
      _error = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÑ‡∏î‡πâ';
      notifyListeners();
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  Future<void> sendMessage(String content) async {
    if (content.trim().isEmpty) return;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (_currentSessionId == null) {
      await startNewSession();
    }

    // Clear any previous errors
    _error = null;
    
    // Add user message
    final userMessage = ChatMessage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      content: content.trim(),
      isUser: true,
      timestamp: DateTime.now(),
    );
    
    _messages.add(userMessage);
    notifyListeners();

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° user
    await _saveMessage(userMessage);

    // Set loading state
    _isLoading = true;
    notifyListeners();

    try {
      // Get response from Gemini API
      final response = await _geminiService.sendMessage(content);
      
      // Add bot response
      final botMessage = ChatMessage(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        content: response,
        isUser: false,
        timestamp: DateTime.now(),
        status: MessageStatus.sent,
      );
      
      _messages.add(botMessage);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° bot
      await _saveMessage(botMessage);
      
    } catch (e) {
      // Set error state
      _error = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°';
      
      // Add error message
      final errorMessage = ChatMessage(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        content: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n\nError: ${e.toString()}',
        isUser: false,
        timestamp: DateTime.now(),
        status: MessageStatus.error,
      );
      
      _messages.add(errorMessage);
      
      print('Error sending message: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  Future<void> _saveMessage(ChatMessage message) async {
    if (_currentSessionId == null) return;

    try {
      await _firebaseChatService.saveMessage(
        sessionId: _currentSessionId!,
        message: message,
      );
    } catch (e) {
      print('Error saving message: $e');
      _error = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ';
      notifyListeners();
    }
  }

  // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  Future<void> clearMessages() async {
    try {
      if (_currentSessionId != null) {
        await _firebaseChatService.deleteChatSession(_currentSessionId!);
      }
      
      _messages.clear();
      _currentSessionId = null;
      _error = null;
      notifyListeners();
    } catch (e) {
      print('Error clearing messages: $e');
      _error = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÑ‡∏î‡πâ';
      notifyListeners();
    }
  }

  // ‡∏•‡∏ö session
  Future<void> deleteSession(String sessionId) async {
    try {
      await _firebaseChatService.deleteChatSession(sessionId);
      _chatSessions.removeWhere((session) => session.id == sessionId);
      
      if (sessionId == _currentSessionId) {
        _messages.clear();
        _currentSessionId = null;
      }
      notifyListeners();
    } catch (e) {
      print('Error deleting session: $e');
      _error = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÑ‡∏î‡πâ';
      notifyListeners();
    }
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠ session
  Future<void> updateSessionTitle(String sessionId, String newTitle) async {
    try {
      await _firebaseChatService.updateSessionTitle(sessionId, newTitle);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï local list
      final index = _chatSessions.indexWhere((s) => s.id == sessionId);
      if (index != -1) {
        _chatSessions[index] = ChatSession(
          id: _chatSessions[index].id,
          userId: _chatSessions[index].userId,
          title: newTitle,
          messageCount: _chatSessions[index].messageCount,
          lastMessage: _chatSessions[index].lastMessage,
          createdAt: _chatSessions[index].createdAt,
          updatedAt: DateTime.now(),
          isActive: _chatSessions[index].isActive,
        );
        notifyListeners();
      }
    } catch (e) {
      print('Error updating session title: $e');
      _error = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÑ‡∏î‡πâ';
      notifyListeners();
    }
  }

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  Future<void> removeMessage(String messageId) async {
    try {
      if (_currentSessionId != null) {
        await _firebaseChatService.deleteMessage(_currentSessionId!, messageId);
      }
      
      _messages.removeWhere((message) => message.id == messageId);
      notifyListeners();
    } catch (e) {
      print('Error removing message: $e');
      _error = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ';
      notifyListeners();
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  Future<ChatStatistics?> getChatStatistics() async {
    try {
      return await _firebaseChatService.getChatStatistics();
    } catch (e) {
      print('Error getting statistics: $e');
      return null;
    }
  }

  // Get suggested questions
  List<String> getSuggestedQuestions() {
    return _geminiService.getSuggestedQuestions();
  }

  // Add a welcome message if no messages exist
  void addWelcomeMessage() {
    if (_messages.isEmpty) {
      final welcomeMessage = ChatMessage(
        id: 'welcome_${DateTime.now().millisecondsSinceEpoch}',
        content: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏™‡∏∏‡∏ô‡∏±‡∏Ç üêï\n\n‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:\n‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏ô‡∏±‡∏Ç\n‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û\n‚Ä¢ ‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£\n‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°\n\n‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏≤‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?',
        isUser: false,
        timestamp: DateTime.now(),
      );
      
      _messages.add(welcomeMessage);
      notifyListeners();
    }
  }

  // Clear error message
  void clearError() {
    _error = null;
    notifyListeners();
  }
}